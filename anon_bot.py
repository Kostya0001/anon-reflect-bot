import os
import json
import asyncio
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    filters
)

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

participants = {}
asker_id = None
current_question = None
answers = {}
DATA_FILE = "users.json"
ANSWER_TIMEOUT = 300
answer_tasks = {}

WELCOME_TEXT = """
üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—É—é –ò–≥—Ä—É! 

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚Äì –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º,  
‚Äì –ø–æ–ª—É—á–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã,  
‚Äì –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –º–∞—Å–∫–æ–π —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º.

–ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–Ω—ë–º ‚Äì –≤–æ—Ç **–Ω–µ—Å–∫–æ–ª—å–∫–æ –ü–†–ê–í–ò–õ**: 

üö´ –ù–µ –ø—ã—Ç–∞–π—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å, –∫—Ç–æ –µ—Å—Ç—å –∫—Ç–æ.  
üö´ –ù–µ –ø–∏—à–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è ‚Äì –±—É–¥—å –∫–µ–º —É–≥–æ–¥–Ω–æ, —Ö–æ—Ç—å –£—Å—Ç—Ä–∏—Ü–µ–π –ì–Ω–µ–≤–∞.  
üö´ –ù–µ —Ñ–ª—É—É–¥–∏, –Ω–µ –º–æ–ª—á–∏, –Ω–µ –≥—Ä—É–±–∏.  

–ê –≥–ª–∞–≤–Ω–æ–µ:  
‚úÖ –ò–≥—Ä–∞–π —á–µ—Å—Ç–Ω–æ, —Å–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –≤—ã–±–∏—Ä–∞–π –¥—É—à–æ–π.

–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ ‚Äì –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
"""

def load_data():
    global participants
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            participants = json.load(f)
            participants = {int(k): v for k, v in participants.items()}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(participants, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    load_data()

    participants[user_id] = {
        "nick": None,
        "role": None,
        "answered": False,
        "wins": 0,
        "accepted_rules": False
    }
    save_data()

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîì –Ø –ø–æ–Ω—è–ª", callback_data="accept_rules")]
    ])
    await update.message.reply_text(WELCOME_TEXT, reply_markup=keyboard)

async def accept_rules_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    participants[user_id]["accepted_rules"] = True
    save_data()

    await query.message.delete()
    await context.bot.send_message(
        chat_id=user_id,
        text="üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ê–Ω–æ–Ω–∏–º:"
    )

async def handle_all_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global asker_id, current_question, answers

    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id not in participants or not participants[user_id].get("accepted_rules"):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø—Ä–∞–≤–∏–ª–∞.")
        return

    if participants[user_id]["nick"] is None:
        if text in ["üî∏ –ó–∞–¥–∞—é—â–∏–π", "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]:
            await update.message.reply_text("‚õî –≠—Ç–æ –∫–Ω–æ–ø–∫–∞, –∞ –Ω–µ –∏–º—è! –ù–∞–ø–∏—à–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫.")
            return
        participants[user_id]["nick"] = text
        save_data()
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}!\n–ö–µ–º —Ö–æ—á–µ—à—å –±—ã—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([["üî∏ –ó–∞–¥–∞—é—â–∏–π"], ["üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]],
            one_time_keyboard=True, resize_keyboard=True)
        )
        return

    if current_question and participants[user_id]["role"] is not None and text in ["üî∏ –ó–∞–¥–∞—é—â–∏–π", "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]:
        await update.message.reply_text("‚õî –†–æ–ª–∏ —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ.")
        return

    if text == "üî∏ –ó–∞–¥–∞—é—â–∏–π":
        load_data()
        if any(p.get("role") == "asker" for p in participants.values()):
            await update.message.reply_text("‚õî –í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—é—â–∏–π.")
            return
        participants[user_id]["role"] = "asker"
        asker_id = user_id
        save_data()
        await update.message.reply_text("‚úÖ –¢—ã —Å—Ç–∞–ª –∑–∞–¥–∞—é—â–∏–º. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        return

    if text == "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π":
        if participants[user_id].get("role") != "answerer":
            participants[user_id]["role"] = "answerer"
            participants[user_id]["answered"] = False
            save_data()
            await update.message.reply_text("–¢—ã –û—Ç–≤–µ—á–∞—é—â–∏–π.")
            if current_question:
                asker_nick = participants.get(asker_id, {}).get("nick", "–ó–∞–¥–∞—é—â–∏–π")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç {asker_nick}:\n‚ùì {current_question}"
                )
        else:
            await update.message.reply_text("–¢—ã —É–∂–µ –û—Ç–≤–µ—á–∞—é—â–∏–π.")
        return

    if current_question is None and participants.get(user_id, {}).get("role") == "asker":
        current_question = text
        answers = {}
        save_data()

        question_text = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {participants[user_id]['nick']}:\n{text}"
        for uid, info in participants.items():
            if info.get("role") == "answerer":
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç {participants[user_id]['nick']}:\n{question_text}"
                )
        await context.bot.send_message(chat_id=user_id, text=question_text)

        task = asyncio.create_task(drop_if_silent(user_id, context))
        answer_tasks[user_id] = task
        return

    if participants[user_id].get("role") == "answerer" and current_question:
        if participants[user_id]["answered"]:
            await update.message.reply_text("–¢—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª.")
            return
        participants[user_id]["answered"] = True
        answers[user_id] = text
        save_data()

        answer_text = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç {participants[user_id]['nick']}:\n{text}"
        for uid in participants:
            await context.bot.send_message(chat_id=uid, text=answer_text)

        if asker_id and asker_id in participants:
            buttons = [
                [InlineKeyboardButton(participants[uid]["nick"], callback_data=f"choose_{uid}")]
                for uid in answers
            ]
            markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(
                chat_id=asker_id,
                text="üí° –í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç:",
                reply_markup=markup
            )
        return

    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global answers
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if participants.get(user_id, {}).get("role") != "asker":
        await query.edit_message_text("‚õî –¢–æ–ª—å–∫–æ –∑–∞–¥–∞—é—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç.")
        return

    data = query.data
    if data.startswith("choose_"):
        chosen_id = int(data.replace("choose_", ""))
        chosen_nick = participants.get(chosen_id, {}).get("nick", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

        participants[chosen_id]["wins"] = participants[chosen_id].get("wins", 0) + 1
        save_data()

        win_count = participants[chosen_id]["wins"]

        for uid in participants:
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"‚úÖ {chosen_nick} –¥–∞–ª –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç! üèÜ –ü–æ–±–µ–¥: {win_count}"
                )
            except:
                pass

        await new_round(context)

async def drop_if_silent(user_id, context):
    await asyncio.sleep(ANSWER_TIMEOUT)

    if participants.get(user_id, {}).get("role") == "asker" and current_question:
        for uid in participants:
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–¥–∞—é—â–∏–π –Ω–µ –≤—ã–±—Ä–∞–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω."
                )
            except:
                pass
        await new_round(context)

async def new_round(context):
    global asker_id, current_question, answers, answer_tasks
    asker_id = None
    current_question = None
    answers = {}
    answer_tasks = {}

    for uid in participants:
        participants[uid]["role"] = None
        participants[uid]["answered"] = False
        try:
            await context.bot.send_message(
                chat_id=uid,
                text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è! –ö–µ–º —Ö–æ—á–µ—à—å –±—ã—Ç—å?",
                reply_markup=ReplyKeyboardMarkup(
                    [["üî∏ –ó–∞–¥–∞—é—â–∏–π"], ["üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
        except:
            pass
    save_data()

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_text))
    app.add_handler(CallbackQueryHandler(accept_rules_callback, pattern="^accept_rules$"))
    app.add_handler(CallbackQueryHandler(button_handler))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async def post_init(application):
        await application.bot.set_webhook(WEBHOOK_URL)

    app.post_init = post_init

    app.run_webhook(
        listen="0.0.0.0",
        port=10000,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
























