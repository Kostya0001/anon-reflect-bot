
import os
import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("TOKEN")

users = {}  # user_id: {"nickname": str, "role": "ask" or "reply"}
current_question = None
current_asker = None
answers = {}
question_time = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in users:
        await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {users[user_id]['nickname']}!")
    else:
        await update.message.reply_text("–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ê–Ω–æ–Ω–∏–º:")
        users[user_id] = {"nickname": None, "role": None}

async def handle_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if users[user_id]["nickname"] is None:
        users[user_id]["nickname"] = text
        await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}! –í—ã–±–µ—Ä–∏ —Ä–æ–ª—å:",
            reply_markup=ReplyKeyboardMarkup([["üî∏ –ó–∞–¥–∞—é—â–∏–π", "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]], resize_keyboard=True)
        )
        return

    if text == "üî∏ –ó–∞–¥–∞—é—â–∏–π":
        if any(u.get("role") == "ask" for u in users.values()):
            await update.message.reply_text("–£–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—é—â–∏–π. –ü–æ–¥–æ–∂–¥–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
            return
        users[user_id]["role"] = "ask"
        await update.message.reply_text("–¢—ã –ó–∞–¥–∞—é—â–∏–π. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    elif text == "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π":
        users[user_id]["role"] = "reply"
        await update.message.reply_text("–¢—ã –û—Ç–≤–µ—á–∞—é—â–∏–π. –ñ–¥–∏ –≤–æ–ø—Ä–æ—Å.")
    else:
        await handle_game(update, context)

async def handle_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_question, current_asker, question_time, answers

    user_id = update.effective_user.id
    text = update.message.text

    if users[user_id]["role"] == "ask" and not current_question:
        current_question = text
        current_asker = user_id
        question_time = datetime.datetime.now()
        answers = {}
        for uid, info in users.items():
            if info["role"] == "reply":
                await context.bot.send_message(chat_id=uid, text=f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {users[user_id]['nickname']}:
{text}")
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    elif users[user_id]["role"] == "reply" and current_question:
        answers[user_id] = text
        await context.bot.send_message(chat_id=current_asker, text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç {users[user_id]['nickname']}:
{text}")
    elif user_id == current_asker and text in [users[u]["nickname"] for u in answers]:
        selected_id = next(u for u in answers if users[u]["nickname"] == text)
        for uid in users:
            msg = f"üéâ –í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç {users[selected_id]['nickname']}:
{answers[selected_id]}"
            context.bot.send_message(chat_id=uid, text=msg)
        current_question = None
        current_asker = None
        answers = {}
        for uid in users:
            users[uid]["role"] = None
        await context.bot.send_message(chat_id=current_asker, text="–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_nickname))
    app.run_polling()

if __name__ == "__main__":
    main()
