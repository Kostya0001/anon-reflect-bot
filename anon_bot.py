import os
import json
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

participants = {}  # user_id: {nick, role, answered}
asker_id = None
current_question = None
answers = {}
DATA_FILE = "users.json"
ANSWER_TIMEOUT = 300  # 5 minutes timeout
answer_tasks = {}

def load_data():
    global participants
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            participants = json.load(f)
            participants = {int(k): v for k, v in participants.items()}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(participants, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    load_data()
    participants[user_id] = {"nick": None, "role": None, "answered": False}
    save_data()
    await update.message.reply_text("üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ê–Ω–æ–Ω–∏–º:")

async def handle_all_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global asker_id, current_question, answers

    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    if user_id not in participants or participants[user_id]["nick"] is None:
        if text in ["üî∏ –ó–∞–¥–∞—é—â–∏–π", "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]:
            await update.message.reply_text("‚õî –≠—Ç–æ –∫–Ω–æ–ø–∫–∞, –∞ –Ω–µ –∏–º—è! –ù–∞–ø–∏—à–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫.")
            return
        participants[user_id] = {"nick": text, "role": None, "answered": False}
        save_data()
        await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {text}!\n–ö–µ–º —Ö–æ—á–µ—à—å –±—ã—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([["üî∏ –ó–∞–¥–∞—é—â–∏–π"], ["üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]],
            one_time_keyboard=True, resize_keyboard=True))
        return

    # –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    if text == "üî∏ –ó–∞–¥–∞—é—â–∏–π":
        load_data()
        if any(p.get("role") == "asker" for p in participants.values()):
            await update.message.reply_text("‚õî –í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—é—â–∏–π.")
            return
        participants[user_id]["role"] = "asker"
        global asker_id
        asker_id = user_id
        save_data()
        await update.message.reply_text("‚úÖ –¢—ã —Å—Ç–∞–ª –∑–∞–¥–∞—é—â–∏–º. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
        return

    if text == "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π":
        if participants[user_id].get("role") != "answerer":
            participants[user_id]["role"] = "answerer"
            participants[user_id]["answered"] = False
            save_data()
        await update.message.reply_text("–¢—ã –û—Ç–≤–µ—á–∞—é—â–∏–π. –ñ–¥–∏ –≤–æ–ø—Ä–æ—Å.")
        return

    # –∑–∞–¥–∞—é—â–∏–π –ø–∏—à–µ—Ç –≤–æ–ø—Ä–æ—Å
    if current_question is None and participants.get(user_id, {}).get("role") == "asker":
        current_question = text
        answers = {}
        save_data()

        question_text = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {participants[user_id]['nick']}:\n{text}"
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –æ—Ç–≤–µ—Ç—á–∏–∫–∞–º —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–≤–µ—Ç–∏—Ç—å
        for uid, info in participants.items():
            if info.get("role") == "answerer":
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç {participants[user_id]['nick']}:\n{question_text}"
                )
        # –∑–∞–¥–∞—é—â–µ–º—É —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await context.bot.send_message(chat_id=user_id, text=question_text)

        # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        for uid, info in participants.items():
            if info.get("role") == "answerer":
                task = asyncio.create_task(drop_if_silent(uid, context))
                answer_tasks[uid] = task
        return

    # –æ—Ç–≤–µ—á–∞—é—â–∏–π –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç
    if participants[user_id].get("role") == "answerer" and current_question:
        if participants[user_id]["answered"]:
            await update.message.reply_text("–¢—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª.")
            return
        participants[user_id]["answered"] = True
        answers[user_id] = text
        save_data()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —á—Ç–æ–±—ã –≤—Å–µ –≤–∏–¥–µ–ª–∏
        answer_text = f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç {participants[user_id]['nick']}:\n{text}"
        for uid, info in participants.items():
            await context.bot.send_message(chat_id=uid, text=answer_text)
        return

    # –∑–∞–¥–∞—é—â–∏–π –≤—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç
    if participants[user_id].get("role") == "asker" and current_question and text in [participants[uid]['nick'] for uid in answers]:
        chosen_id = [uid for uid, data in participants.items() if data['nick'] == text][0]
        await context.bot.send_message(chat_id=update.effective_chat.id,
            text=f"‚úÖ {participants[chosen_id]['nick']} –¥–∞–ª –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç!")
        await new_round(context)
        return

    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

async def drop_if_silent(user_id, context):
    await asyncio.sleep(ANSWER_TIMEOUT)  # 5 –º–∏–Ω—É—Ç
    if not participants[user_id]["answered"]:
        participants[user_id]["role"] = None
        await context.bot.send_message(chat_id=user_id, text="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, —Ç—ã –≤—ã–±—ã–ª –∏–∑ —Ä–∞—É–Ω–¥–∞.")
    else:
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ –ø–æ—Å–ª–µ 5 –º–∏–Ω—É—Ç –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if current_question and asker_id == user_id:  # –µ—Å–ª–∏ –º—ã –µ—â—ë –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await context.bot.send_message(chat_id=user_id, text="‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
            await new_round(context)

async def new_round(context):
    global asker_id, current_question, answers, answer_tasks
    asker_id = None
    current_question = None
    answers = {}
    answer_tasks = {}

    for uid in participants:
        participants[uid]["role"] = None
        participants[uid]["answered"] = False
        try:
            await context.bot.send_message(
                chat_id=uid,
                text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è! –ö–µ–º —Ö–æ—á–µ—à—å –±—ã—Ç—å?",
                reply_markup=ReplyKeyboardMarkup(
                    [["üî∏ –ó–∞–¥–∞—é—â–∏–π"], ["üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
        except:
            pass
    save_data()

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_all_text))
    app.run_webhook(
        listen="0.0.0.0",
        port=10000,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()










