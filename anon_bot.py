import json
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = os.getenv("TOKEN")

participants = {}  # user_id: {'nick': str, 'role': 'asker' or 'answerer', 'answered': False}
asker_id = None
current_question = None
DATA_FILE = "users.json"
ANSWER_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç
answer_tasks = {}  # user_id: asyncio.Task

# üìÅ –ó–∞–≥—Ä—É–∑–∫–∞
def load_participants():
    global participants
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            participants = json.load(f)
            for uid in list(participants.keys()):
                participants[int(uid)] = participants.pop(uid)

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
def save_participants():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(participants, f, ensure_ascii=False, indent=2)

# üü¢ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in participants or not participants[user_id].get("nick"):
        participants[user_id] = {"nick": None, "role": None, "answered": False}
        await update.message.reply_text("üë§ –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ê–Ω–æ–Ω–∏–º:")
    else:
        await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {participants[user_id]['nick']}!")

# üë§ –ù–∏–∫
async def handle_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if participants[user_id]["nick"] is None:
        participants[user_id]["nick"] = update.message.text.strip()
        save_participants()
        await update.message.reply_text(
            "–ö–µ–º —Ö–æ—á–µ—à—å –±—ã—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([["üî∏ –ó–∞–¥–∞—é—â–∏–π"], ["üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]],
                                             resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        await handle_role_selection(update, context)

# üé≠ –†–æ–ª—å
async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global asker_id
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "üî∏ –ó–∞–¥–∞—é—â–∏–π":
        if asker_id is not None:
            await update.message.reply_text("–£–∂–µ –µ—Å—Ç—å –∑–∞–¥–∞—é—â–∏–π. –î–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
            return
        participants[user_id]["role"] = "asker"
        asker_id = user_id
        await update.message.reply_text("–¢—ã –∑–∞–¥–∞—é—â–∏–π. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    elif text == "üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π":
        participants[user_id]["role"] = "answerer"
        await update.message.reply_text("–¢—ã –æ—Ç–≤–µ—á–∞—é—â–∏–π. –ñ–¥–∏ –≤–æ–ø—Ä–æ—Å.")
    else:
        await handle_message(update, context)

# ‚ùì –í–æ–ø—Ä–æ—Å / –æ—Ç–≤–µ—Ç
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_question
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if participants[user_id]["role"] == "asker" and current_question is None:
        current_question = text
        for uid, info in participants.items():
            if info["role"] == "answerer":
                await context.bot.send_message(chat_id=uid, text=f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {participants[user_id]['nick']}:\n{text}")
                participants[uid]["answered"] = False
                # ‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                task = asyncio.create_task(answer_timer(uid, context))
                answer_tasks[uid] = task
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥–∏ –æ—Ç–≤–µ—Ç—ã.")
    elif participants[user_id]["role"] == "answerer" and current_question:
        if not participants[user_id]["answered"]:
            participants[user_id]["answered"] = True
            if user_id in answer_tasks:
                answer_tasks[user_id].cancel()
            await context.bot.send_message(chat_id=asker_id,
                                           text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç {participants[user_id]['nick']}:\n{text}")
        else:
            await update.message.reply_text("–¢—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª.")
    elif participants[user_id]["role"] == "asker" and text in [p["nick"] for uid, p in participants.items() if uid != user_id]:
        # –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_id = next(uid for uid, p in participants.items() if p["nick"] == text)
        for uid in participants:
            await context.bot.send_message(chat_id=uid,
                                           text=f"üèÜ –û—Ç–≤–µ—Ç {participants[winner_id]['nick']} –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –ª—É—á—à–∏–π!")
        await new_round(update, context)
    else:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ä–æ–ª—å.")

# ‚è∞ –¢–∞–π–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
async def answer_timer(uid, context):
    await asyncio.sleep(ANSWER_TIMEOUT)
    if not participants[uid]["answered"]:
        await context.bot.send_message(chat_id=uid, text="‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤—ã—à–ª–æ. –¢—ã –≤—ã–±—ã–≤–∞–µ—à—å.")
        participants[uid]["role"] = None

# üîÅ /newround
async def new_round(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global asker_id, current_question, answer_tasks
    asker_id = None
    current_question = None
    answer_tasks.clear()

    for uid in participants:
        participants[uid]["role"] = None
        participants[uid]["answered"] = False
        try:
            await context.bot.send_message(
                chat_id=uid,
                text="üé≤ –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è! –ö–µ–º —Ö–æ—á–µ—à—å –±—ã—Ç—å?",
                reply_markup=ReplyKeyboardMarkup(
                    [["üî∏ –ó–∞–¥–∞—é—â–∏–π"], ["üîπ –û—Ç–≤–µ—á–∞—é—â–∏–π"]],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
        except:
            pass

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
def main():
    load_participants()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("newround", new_round))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_nickname))
    app.run_polling()

if __name__ == "__main__":
    main()

